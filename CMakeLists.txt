project(MoulKI)
cmake_minimum_required(VERSION 2.6)

find_package(Qt4 REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(HSPlasmaNet REQUIRED)

set(MoulKI_SOURCES
    main.cpp
    MoulKI.cpp
    qtAuthClient.cpp
    qtGameClient.cpp
    qtVault.cpp
    LoginDialog.cpp
    SetActiveDialog.cpp
    RefDialog.cpp
    FetchDialog.cpp
    qtNodeEdit.cpp
    qtSDLTreeModel.cpp
    CreateNodeDialog.cpp
    pfConsoleParser.cpp
    )
set(MoulKI_HEADERS
    MoulKI.h
    qtAuthClient.h
    qtGameClient.h
    qtVault.h
    qtSDLTreeModel.h
    LoginDialog.h
    SetActiveDialog.h
    RefDialog.h
    FetchDialog.h
    qtNodeEdit.h
    CreateNodeDialog.h
    pfConsoleParser.h
    )
set(MoulKI_FORMS
    MoulKI.ui
    LoginDialog.ui
    SetActiveDialog.ui
    RefDialog.ui
    FetchDialog.ui
    qtNodeEdit.ui
    CreateNodeDialog.ui
    )
set(MoulKI_Resources
    Resources.qrc
    )

if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "-Wall -std=c++0x ${CMAKE_CXXFLAGS}")
endif()

# Set up Qt requirements
INCLUDE(${QT_USE_FILE})
ADD_DEFINITIONS(${QT_DEFINITIONS})
QT4_WRAP_CPP(MoulKI_HEADERS_MOC ${MoulKI_HEADERS})
QT4_WRAP_UI(MoulKI_FORMS_HEADERS ${MoulKI_FORMS})
QT4_ADD_RESOURCES(MoulKI_Resources_RCC ${MoulKI_Resources})

include_directories("${CMAKE_SOURCE_DIR}"
                    "${OPENSSL_INCLUDE_DIR}"
                    "${HSPlasmaNet_INCLUDE_DIRS}"
                    "${CMAKE_CURRENT_BINARY_DIR}"   # Required for Qt's autogenerated files
                    )

source_group("MoulKI Sources" FILES ${MoulKI_SOURCES})
source_group("MoulKI Headers" FILES ${MoulKI_HEADERS})
source_group("MoulKI Forms" FILES ${MoulKI_FORMS})
# These will be in the project listing, so we may as well label them nicely
source_group("Auto-generated" FILES ${MoulKI_HEADERS_MOC} ${MoulKI_FORMS_HEADERS} ${MoulKI_Resources_RCC})

add_executable(MoulKI ${all_SOURCES}
                    ${MoulKI_SOURCES}
                    ${MoulKI_HEADERS}
                    ${MoulKI_HEADERS_MOC}
                    ${MoulKI_FORMS_HEADERS}
                    ${MoulKI_Resources_RCC}
                    )

target_link_libraries(MoulKI ${HSPlasmaNet_LIBRARIES} ${QT_LIBRARIES})
